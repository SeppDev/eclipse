use crate::{
    json,
    lsp::json::{JSONNull, JSONObject, ToJson},
};

#[derive(Default)]
pub struct ClientCapabilities {
    workspace: Option<Workspace>,
    // did_change_configuration: Option<DidChangeConfigurationClientCapabilities>,
}
impl ToJson for ClientCapabilities {
    fn to_json(self) -> super::JSONObject {
        json! {
            workspace: self.workspace.unwrap()
        }
    }
}

#[derive(Default)]
pub struct Workspace {
    apply_edit: Option<bool>,
    workspace_edit: Option<WorkspaceEditClientCapabilities>,
}

impl ToJson for Workspace {
    fn to_json(self) -> JSONObject {
        json! {
            applyEdit: self.apply_edit,
            workspaceEdit: match self.workspace_edit {
		Some(s) => json!(s),
None => JSONObject::Null
		}.
        }
    }
}

#[derive(Default)]
pub struct WorkspaceEditClientCapabilities {
    document_changes: Option<bool>,
    resources_operations: Option<Vec<ResourceOperationKind>>,
    failure_handling: Option<FailureHandlingKind>,
    normalizes_line_endings: Option<bool>,
    change_annotation_support: Option<WorkspaceChangeAnnotationSupport>,
}
impl ToJson for WorkspaceEditClientCapabilities {
    fn to_json(self) -> JSONObject {
        json! {}
    }
}

#[derive(Default)]
pub struct WorkspaceChangeAnnotationSupport {
    group_on_label: Option<bool>,
}

#[derive(Default)]
pub enum ResourceOperationKind {
    #[default]
    Create,
    Rename,
    Delete,
}

#[derive(Default)]
pub enum FailureHandlingKind {
    #[default]
    Abort,
    Transactional,
    Undo,
    TextOnlyTransactional,
}
